


version: '3.8'

services:
  # Flask Trading Application
  trading-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: trading-platform
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://trading:${POSTGRES_PASSWORD:-trading123}@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - ALPACA_PAPER_KEY=${ALPACA_PAPER_KEY}
      - ALPACA_PAPER_SECRET=${ALPACA_PAPER_SECRET}
      - ALPACA_LIVE_KEY=${ALPACA_LIVE_KEY}
      - ALPACA_LIVE_SECRET=${ALPACA_LIVE_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./charts:/app/charts
      - ./logs:/app/logs
      - ./webhooks:/app/webhooks
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    environment:
      - POSTGRES_DB=trading_db
      - POSTGRES_USER=trading
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trading123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading -d trading_db"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: trading-celery
    command: celery -A src.backend.app.celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://trading:${POSTGRES_PASSWORD:-trading123}@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/0
      - ALPACA_PAPER_KEY=${ALPACA_PAPER_KEY}
      - ALPACA_PAPER_SECRET=${ALPACA_PAPER_SECRET}
      - ALPACA_LIVE_KEY=${ALPACA_LIVE_KEY}
      - ALPACA_LIVE_SECRET=${ALPACA_LIVE_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./charts:/app/charts
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - trading-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./src/frontend/build:/usr/share/nginx/html:ro
      - ./charts:/usr/share/nginx/html/charts:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - trading-app
    restart: unless-stopped
    networks:
      - trading-network

  # Backup Service (runs daily)
  backup:
    image: postgres:15-alpine
    container_name: trading-backup
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-trading123}
    volumes:
      - ./backups:/backups
      - ./bin:/scripts:ro
    command: >
      sh -c "
        echo '0 2 * * * /scripts/backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - trading-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


